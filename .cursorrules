rustlang wrappers around crypto exchanges

Background

There wrappers are going to be used in a High Frequency trading system so low latency is paramount. Code that is complex but fast (whilst still correct) is preferred over cleaner yet slower code.

Common supporting code

For code in crates that support each venue, such as websockets, no venue specific code or knowledge of the venues is allowed. The code must be clean.

Rules

1. All venues to implement the low latency APIs. If Websocket available, use that over REST calls.
2. All venue rate limiting to be implemented exactly.
3. All wrappers around the endpoints should be pure. Not fixes and helper functions.
4. All websockets to implement the common websocket trait.

HOW TO: To implement a new exchange

1. Create a directory under venues/src for the venue
2. Create all enums
3. Create all error codes as rust errors
4. Implement the auth
5. Implement rate limiting
6. Implement the endpoints
7. If the exchange rests an error via a HTTP code OR a 200 with an error payload, this 
needs to be converted to rust native errors.
